local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

-- Création de la fenêtre principale
local Window = Library:CreateWindow{
    Title = "MoonHub",
    SubTitle = "By Godlike",
    TabWidth = 125,
    Size = UDim2.fromOffset(830, 525),
    Resize = true,
    MinSize = Vector2.new(470, 380),
    Acrylic = true,
    Theme = "Light",
    MinimizeKey = Enum.KeyCode.RightControl
}

-- Add Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "0" }),
    AutoWeights = Window:AddTab({ Title = "Auto Weights", Icon = "0" }),
    AutoRebirth = Window:AddTab({ Title = "Auto Rebirth", Icon = "0" }),
    AutoKill = Window:AddTab({ Title = "Auto Kill", Icon = "0" })
}

-- Main Tab
local MainSection = Tabs.Main:CreateSection("Basic Controls")
local selectedSize = "2"
local selectedSpeed = "125"

local InputSize = MainSection:AddInput("SizeChanger", {
    Title = "Size Changer",
    Description = "Enter Size",
    Default = "2",
    Placeholder = "Type here...",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        selectedSize = Value
        if _G.AutoSize then
            game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", tonumber(selectedSize))
        end
    end
})

local ToggleAutoSize = Tabs.Main:CreateToggle("AutoSize", {
    Title = "Auto Set Size",
    Description = "Auto Set your chosen Size",
    Default = false,
    Callback = function(Value)
        _G.AutoSize = Value
        while _G.AutoSize do
            game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", tonumber(selectedSize))
            task.wait(0.1)
        end
    end
})

local InputSpeed = Tabs.Main:CreateInput("SpeedChanger", {
    Title = "Speed Changer",
    Description = "Enter Speed",
    Default = "125",
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        selectedSpeed = Value
        if _G.AutoSpeed and game.Players.LocalPlayer.Character then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = tonumber(selectedSpeed)
            end
        end
    end
})

local ToggleAutoSpeed = Tabs.Main:CreateToggle("AutoSpeed", {
    Title = "Auto Set Speed",
    Description = "Auto Set your chosen Speed",
    Default = false,
    Callback = function(Value)
        _G.AutoSpeed = Value
        while _G.AutoSpeed do
            if game.Players.LocalPlayer.Character then
                local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = tonumber(selectedSpeed)
                end
            end
            task.wait()
        end
    end
})

-- Button actions
Tabs.Main:AddButton({
    Title = "FREE AUTO LIFT PASS",
    Description = "Makes the Auto Lift Pass free",
    Callback = function()
        local gamepassFolder = game:GetService("ReplicatedStorage").gamepassIds
        local player = game:GetService("Players").LocalPlayer
        for _, gamepass in pairs(gamepassFolder:GetChildren()) do
            local value = Instance.new("IntValue")
            value.Name = gamepass.Name
            value.Value = gamepass.Value
            value.Parent = player.ownedGamepasses
        end
    end
})

Tabs.Main:AddButton({
    Title = "Destroy Ad portal",
    Description = "Self explanatory💀🙏",
    Callback = function()
        local part = workspace:FindFirstChild("RobloxForwardPortals")
        if part then
            part:Destroy()
        end
    end
})

-- Auto Weights Tab
local ToggleAutoWeight = Tabs.AutoWeights:CreateToggle("Auto Weights", {
    Title = "Auto Weight",
    Description = "This auto lifts the Dumbbell",
    Callback = function(Value)
        _G.AutoWeight = Value
        if Value then
            local weightTool = game.Players.LocalPlayer.Backpack:FindFirstChild("Weight")
            if weightTool then
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(weightTool)
            end
        else
            local character = game.Players.LocalPlayer.Character
            local equipped = character:FindFirstChild("Weight")
            if equipped then
                equipped.Parent = game.Players.LocalPlayer.Backpack
            end
        end
        while _G.AutoWeight do
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
            task.wait(0.001)
        end
    end
})

-- Additional toggles for Auto Weights Tab can go here...

-- Auto Rebirth Tab
local targetInput = Tabs.AutoRebirth:CreateInput("TargetRebirth", {
    Title = "Rebirth Amount",
    Description = "Enter your target rebirth goal",
    Default = "1",
    Placeholder = "Enter amount...",
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        targetRebirthValue = tonumber(Value) or 1
    end
})

local targetRebirthLoop = nil
local targetToggle = Tabs.AutoRebirth:CreateToggle("AutoRebirthTarget", {
    Title = "Auto Rebirth (Target point)",
    Description = "Automatically rebirth until target is reached",
    Default = false,
    Callback = function(Value)
        if Value then
            targetRebirthLoop = task.spawn(function()
                while task.wait(0.1) do
                    if game.Players.LocalPlayer.leaderstats.Rebirths.Value >= targetRebirthValue then
                        targetToggle:SetValue(false)
                        break
                    end
                    game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                end
            end)
        else
            if targetRebirthLoop then
                task.cancel(targetRebirthLoop)
                targetRebirthLoop = nil
            end
        end
    end
})

-- Auto Kill Tab
local Section = Tabs.AutoKill:CreateSection("Auto Kill")
local Players = game:GetService("Players")

local function checkCharacter()
    if not game.Players.LocalPlayer.Character then
        repeat
            task.wait()
        until game.Players.LocalPlayer.Character
    end
    return game.Players.LocalPlayer.Character
end

local function killPlayer(target)
    local character = checkCharacter()
    if character and target.Character then
        if target.Character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("LeftHand") then
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
            firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
        end
    end
end

Tabs.AutoKill:AddToggle("Kill Player", {
    Title = "Start Killing",
    Default = false,
    Callback = function(v)
        getgenv().killallv2 = v
        task.spawn(function()
            while getgenv().killallv2 do
                for _, player in ipairs(game.Players:GetPlayers()) do
                    if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
                        killPlayer(player)
                    end
                end
                task.wait()
            end
        end)
    end
})

local PlayerDropdown = Tabs.AutoKill:CreateDropdown("PlayerList", {
    Title = "Kill Target",
    Description = "Choose player to target",
    Values = {},
    Multi = false,
    Default = nil,
    Callback = function(Value)
        targetPlayer = string.match(Value, "(.+) |")
        print("Target set to:", targetPlayer)
    end
})

local function updatePlayerList()
    local playerInfo = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            local displayText = player.Name .. " | " .. player.DisplayName
            table.insert(playerInfo, displayText)
        end
    end
    PlayerDropdown:SetValues(playerInfo)
end

task.spawn(function()
    while true do
        updatePlayerList()
        task.wait(1)
    end
end)

game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)
updatePlayerList()
