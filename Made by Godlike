-- Load Dependencies
local Library = loadstring(game:HttpGet("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

-- Main Window
local Window = Library:CreateWindow{
    Title = "MoonHub",
    SubTitle = "By Godlike",
    TabWidth = 125,
    Size = UDim2.fromOffset(830, 525),
    Resize = true,
    MinSize = Vector2.new(470, 380),
    Acrylic = true,
    Theme = "Light",
    MinimizeKey = Enum.KeyCode.RightControl
}

-- Tabs
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "0" }),
    AutoWeights = Window:AddTab({ Title = "Auto Weights", Icon = "0" }),
    AutoRebirth = Window:AddTab({ Title = "Auto Rebirth", Icon = "0" }),
    AutoKill = Window:AddTab({ Title = "Auto Kill", Icon = "0" }),
    AutoRock = Window:AddTab({ Title = "Auto Rock", Icon = "0" })
}

---------------------
-- Main Controls Tab
---------------------
local MainSection = Tabs.Main:CreateSection("Basic Controls")
local selectedSize = 2
local selectedSpeed = 125

-- Size Changer Input
MainSection:AddInput("SizeChanger", {
    Title = "Size Changer",
    Description = "Enter Size",
    Default = "2",
    Placeholder = "Type here...",
    Numeric = true,
    Finished = true,
    Callback = function(val)
        selectedSize = tonumber(val) or 2
        if _G.AutoSize then
            game.ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", selectedSize)
        end
    end
})

-- Auto Size Toggle
MainSection:CreateToggle("AutoSize", {
    Title = "Auto Set Size",
    Description = "Auto apply chosen size",
    Default = false,
    Callback = function(enabled)
        _G.AutoSize = enabled
        task.spawn(function()
            while _G.AutoSize do
                game.ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", selectedSize)
                task.wait(0.1)
            end
        end)
    end
})

-- Speed Changer Input
MainSection:AddInput("SpeedChanger", {
    Title = "Speed Changer",
    Description = "Enter Speed",
    Default = "125",
    Placeholder = "Enter Speed",
    Numeric = true,
    Finished = true,
    Callback = function(val)
        selectedSpeed = tonumber(val) or 125
        if _G.AutoSpeed then
            local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = selectedSpeed
            end
        end
    end
})

-- Auto Speed Toggle
MainSection:CreateToggle("AutoSpeed", {
    Title = "Auto Set Speed",
    Description = "Auto apply chosen speed",
    Default = false,
    Callback = function(enabled)
        _G.AutoSpeed = enabled
        task.spawn(function()
            while _G.AutoSpeed do
                local char = game.Players.LocalPlayer.Character
                if char and char:FindFirstChild("Humanoid") then
                    char.Humanoid.WalkSpeed = selectedSpeed
                end
                task.wait(0.1)
            end
        end)
    end
})

-- Free Auto Lift Pass
MainSection:AddButton({
    Title = "FREE AUTO LIFT PASS",
    Description = "Makes the Auto Lift Pass free",
    Callback = function()
        local gpFolder = game.ReplicatedStorage:FindFirstChild("gamepassIds")
        local player = game.Players.LocalPlayer
        if gpFolder and player:FindFirstChild("ownedGamepasses") then
            for _, gp in pairs(gpFolder:GetChildren()) do
                local val = Instance.new("IntValue")
                val.Name = gp.Name
                val.Value = gp.Value
                val.Parent = player.ownedGamepasses
            end
        end
    end
})

-- Destroy Ad Portal
MainSection:AddButton({
    Title = "Destroy Ad portal",
    Description = "Self explanatory💀🙏",
    Callback = function()
        local portal = workspace:FindFirstChild("RobloxForwardPortals")
        if portal then portal:Destroy() end
    end
})

-----------------------
-- Auto Weights Tab
-----------------------
Tabs.AutoWeights:CreateToggle("Auto Weights", {
    Title = "Auto Weight",
    Description = "Automatically lift dumbbell",
    Default = false,
    Callback = function(val)
        _G.AutoWeight = val
        local plr = game.Players.LocalPlayer
        local tool = plr.Backpack:FindFirstChild("Weight")
        if val and tool then
            plr.Character.Humanoid:EquipTool(tool)
        elseif not val and plr.Character:FindFirstChild("Weight") then
            plr.Character.Weight.Parent = plr.Backpack
        end
        task.spawn(function()
            while _G.AutoWeight do
                plr.muscleEvent:FireServer("rep")
                task.wait(0.01)
            end
        end)
    end
})

-- Universal Exercise Toggle Function
local function createExerciseToggle(title, toolName)
    Tabs.AutoWeights:CreateToggle(title, {
        Title = title,
        Description = "Auto use tool: " .. toolName,
        Callback = function(val)
            _G["Auto" .. toolName] = val
            local plr = game.Players.LocalPlayer
            local tool = plr.Backpack:FindFirstChild(toolName)
            if val and tool then
                plr.Character.Humanoid:EquipTool(tool)
            elseif not val and plr.Character:FindFirstChild(toolName) then
                plr.Character[toolName].Parent = plr.Backpack
            end
            task.spawn(function()
                while _G["Auto" .. toolName] do
                    plr.muscleEvent:FireServer("rep")
                    task.wait(0.01)
                end
            end)
        end
    })
end

createExerciseToggle("Auto Pushups", "Pushups")
createExerciseToggle("Auto Situps", "Situps")
createExerciseToggle("Auto Handstands", "Handstands")

-------------------------
-- Auto Rebirth Tab
-------------------------
local rebirthTarget = 1
Tabs.AutoRebirth:CreateInput("RebirthAmount", {
    Title = "Rebirth Amount",
    Default = "1",
    Numeric = true,
    Callback = function(val)
        rebirthTarget = tonumber(val) or 1
    end
})

Tabs.AutoRebirth:CreateToggle("AutoRebirth", {
    Title = "Auto Rebirth (Target)",
    Default = false,
    Callback = function(enabled)
        if enabled then
            task.spawn(function()
                while enabled do
                    local stats = game.Players.LocalPlayer:FindFirstChild("leaderstats")
                    if stats and stats:FindFirstChild("Rebirths") and stats.Rebirths.Value >= rebirthTarget then break end
                    game.ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    task.wait(0.2)
                end
            end)
        end
    end
})

------------------------
-- Auto Kill Tab
------------------------
local Players = game:GetService("Players")
local function getCharacter()
    return Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
end

local function killTarget(target)
    local char = getCharacter()
    if char and target.Character then
        local root = target.Character:FindFirstChild("HumanoidRootPart")
        local hand = char:FindFirstChild("LeftHand")
        if root and hand then
            firetouchinterest(root, hand, 0)
            firetouchinterest(root, hand, 1)
        end
    end
end

Tabs.AutoKill:AddToggle("StartKill", {
    Title = "Start Killing",
    Default = false,
    Callback = function(enabled)
        getgenv().killAll = enabled
        task.spawn(function()
            while getgenv().killAll do
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
                        killTarget(player)
                    end
                end
                task.wait(0.1)
            end
        end)
    end
})

local PlayerDropdown = Tabs.AutoKill:CreateDropdown("PlayerList", {
    Title = "Kill Target",
    Values = {},
    Callback = function(val)
        getgenv().targetPlayer = val:match("(.+)%s|")
    end
})

local function refreshPlayerList()
    local options = {}
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= Players.LocalPlayer then
            table.insert(options, p.Name .. " | " .. p.DisplayName)
        end
    end
    PlayerDropdown:SetValues(options)
end

Players.PlayerAdded:Connect(refreshPlayerList)
Players.PlayerRemoving:Connect(refreshPlayerList)
task.spawn(function()
    while true do
        refreshPlayerList()
        task.wait(1)
    end
end)

Tabs.AutoKill:CreateToggle("Fast Kill", {
    Title = "Fast Kill",
    Callback = function(enabled)
        local function setAttackTime(val)
            for _, location in pairs({game.Players.LocalPlayer.Backpack, game.Players.LocalPlayer.Character}) do
                local punch = location and location:FindFirstChild("Punch")
                if punch and punch:FindFirstChild("attackTime") then
                    punch.attackTime.Value = val
                end
            end
        end
        setAttackTime(enabled and 0 or 0.35)
    end
})

Tabs.AutoKill:CreateToggle("Auto Punch", {
    Title = "Auto Punch",
    Callback = function(enabled)
        _G.fastHit = enabled
        task.spawn(function()
            while _G.fastHit do
                local plr = Players.LocalPlayer
                local tool = plr.Backpack:FindFirstChild("Punch")
                if tool then tool.Parent = plr.Character end
                plr.muscleEvent:FireServer("punch", "rightHand")
                plr.muscleEvent:FireServer("punch", "leftHand")
                local punchTool = plr.Character and plr.Character:FindFirstChild("Punch")
                if punchTool then punchTool:Activate() end
                task.wait()
            end
        end)
    end
})

-------------------------
-- Auto Rock Tab
-------------------------
local function createRockToggle(tab, title, durability)
    tab:CreateToggle(title, {
        Title = title,
        Callback = function(enabled)
            getgenv().autoFarm = enabled
            task.spawn(function()
                while getgenv().autoFarm do
                    local player = game.Players.LocalPlayer
                    if player.Durability.Value >= durability then
                        for _, desc in pairs(workspace.machinesFolder:GetDescendants()) do
                            if desc.Name == "neededDurability" and desc.Value == durability then
                                local rock = desc.Parent:FindFirstChild("Rock")
                                if rock and player.Character:FindFirstChild("LeftHand") and player.Character:FindFirstChild("RightHand") then
                                    for _, hand in pairs({player.Character.LeftHand, player.Character.RightHand}) do
                                        firetouchinterest(rock, hand, 0)
                                        firetouchinterest(rock, hand, 1)
                                    end
                                end
                            end
                        end
                    end
                    task.wait(0.1)
                end
            end)
        end
    })
end

createRockToggle(Tabs.AutoRock, "Auto Tiny Rock", 0)
createRockToggle(Tabs.AutoRock, "Auto Frost Rock", 150000)
createRockToggle(Tabs.AutoRock, "Auto Mystic Rock", 400000)
createRockToggle(Tabs.AutoRock, "Auto Eternal Rock", 750000)
